#!/bin/sh
set -e

# boilerplate code for scripts under {vcshglobal}/bin {{{
VCSHGLOBAL_INT_LASTPRGPATHNAME="$0" \
	&& . "${VCSHGLOBAL_INT_LASTPRGPATHNAME%/*}/.vcshglobal-sh-init" \
	|| {
		rc=$?
		echo "${0}: ERROR: failed to source local '.vcshglobal-sh-init' file on same directory (rc=$rc)" 1>&2
		exit $rc
	}
# }}}

# args: STAGE_ID
#
# STAGE_ID:
#  * [deprecated] stageid_vcshglobal_help_syntax_ownoptions_nonl
#     example: printf '%s' '[program_options] '
#  * stageid_vcshglobal_help_syntax_ownargs_nonl
#    example printf '%s' ' COMMAND'
#  * stageid_vcshglobal_help_summary_info
#     example: echo 'Program that does something'
#  * stageid_vcshglobal_help_section_ownoptions
#  * stageid_vcshglobal_help_section_bottom
#
f_vcshglobal_shinit_help_custom()
{
	case "$1" in
		stageid_vcshglobal_help_syntax_ownargs_nonl )
			printf '%s' ' [MR_OPTIONS_AND_ARGS...]'
			;;

		stageid_vcshglobal_help_summary_info )
			printf '%s\n\n' "mr(1) wrapper to manage global(/shared) deployments"
			;;

		stageid_vcshglobal_help_section_bottom )
			cat <<EOS
Every mr(1) command and option is supported.

Note:
    run "mr help" (or "${VCSHGLOBAL_INT_LASTPRGPATHNAME} help")
    to get the help from 'mr(1)' itself.

EOS
			#-? f_mr_run help 2>&1 || :
			;;
	esac
	return 0
}

# TODO: move to the "functions" file {{{
unset \
	VCSHGLOBAL_MR_INT_OPTIONS_GENERATED_FLAG \
	# end

# args: [MODE]
#  MODE
#    'f' : forced
#    'c' : conditional (default)
f_process_mrvcshglobal_vars()
{
	case "${1:-c}" in
		f | forced )
			# MAYBE: leave this some/all of these alone?
			unset \
				VCSHGLOBAL_MR_INT_OPTIONS_GROUP_CFGFILE \
				VCSHGLOBAL_MR_INT_OPTIONS_GROUP_TOPMOSTDIR \
				\
				VCSHGLOBAL_MR_INT_OPTIONS_PRE_ALL \
				VCSHGLOBAL_MR_INT_OPTIONS_POST_ALL \
				\
				VCSHGLOBAL_MR_INT_OPTIONS_GENERATED_FLAG \
				# end
			;;

		c | cond )
			[ -z "${VCSHGLOBAL_MR_INT_OPTIONS_GENERATED_FLAG}" ] \
				|| return 0
			;;

		* )
			# TODO: report error: invalid args
			return 1 ;;
	esac

	if [ -z "${VCSHGLOBAL_MR_INT_OPTIONS_GROUP_CFGFILE}" -a -n "${VCSHGLOBAL_MR_CONFIG_FILE}" ] ; then
		VCSHGLOBAL_MR_INT_OPTIONS_GROUP_CFGFILE="-c ${VCSHGLOBAL_MR_CONFIG_FILE}"
	fi
	if [ -z "${VCSHGLOBAL_MR_INT_OPTIONS_GROUP_TOPMOSTDIR}" -a -n "${VCSHGLOBAL_MR_TOP_D}" ] ; then
		VCSHGLOBAL_MR_INT_OPTIONS_GROUP_TOPMOSTDIR="-d ${VCSHGLOBAL_MR_TOP_D}"
	fi
	VCSHGLOBAL_MR_INT_OPTIONS_GENERATED_FLAG=1
	# always regenerate these variables form their parts
	VCSHGLOBAL_MR_INT_OPTIONS_PRE_ALL="${VCSHGLOBAL_MR_INT_OPTIONS_GROUP_CFGFILE} ${VCSHGLOBAL_MR_INT_OPTIONS_GROUP_TOPMOSTDIR}"
	VCSHGLOBAL_MR_INT_OPTIONS_POST_ALL=""
}

f_mr_run()
{
	f_process_mrvcshglobal_vars c || return $?

	#? mr ${VCSHGLOBAL_MR_INT_OPTIONS_PRE_ALL} "$@" ${VCSHGLOBAL_MR_INT_OPTIONS_POST_ALL}
	mr ${VCSHGLOBAL_MR_INT_OPTIONS_PRE_ALL} "$@"
}

f_mr_exec()
{
	f_process_mrvcshglobal_vars c || return $?

	#? exec mr ${VCSHGLOBAL_MR_INT_OPTIONS_PRE_ALL} "$@" ${VCSHGLOBAL_MR_INT_OPTIONS_POST_ALL}
	exec mr ${VCSHGLOBAL_MR_INT_OPTIONS_PRE_ALL} "$@"
}

# }}}

# boilerplate code to process options {{{
[ -n "${g_vcshglobal_shinit_progopt_process_evalexpr}" ] \
	&& eval "${g_vcshglobal_shinit_progopt_process_evalexpr}" \
	|| f_vcshglobal_abort "processing program options. remaining parameters: '$*'"
# }}}

# process config files {{{
f_vcshglobal_main_proc_cfgfiles \
	|| f_vcshglobal_abort "failed processing main common code"
# }}}

f_mr_exec "$@"

# vim600: set filetype=sh fileformat=unix:
# vim: set noexpandtab:
# vi: set autoindent tabstop=4 shiftwidth=4:
