# shell script

# basic functions {{{
f_vcshglobal_echo_to_stdout()
{
	echo "${VCSHGLOBAL_INT_LASTPRGPATHNAME:-$0}:" "$@" 1>&2
}

f_vcshglobal_debug()
{
	[ -n "${g_vcshglobal_debug_flag}" ] || return 0
	f_vcshglobal_echo_to_stdout "[debug]" "$@"
}

f_vcshglobal_debug_from_stdin()
{
	[ -n "${g_vcshglobal_debug_flag}" ] || return 0
	sed 's,^,'"${VCSHGLOBAL_INT_LASTPRGPATHNAME:-$0}: [debug] "',' 1>&2 2> /dev/null
}

f_vcshglobal_error()
{
	f_vcshglobal_echo_to_stdout "ERROR:" "$@"
	return 1
}

f_vcshglobal_abort()
{
	f_vcshglobal_error "$@" "-- aborting" \
		|| exit $?
}
# }}}

# initial validation {{{
[ -n "${VCSHGLOBAL_INT_LASTPRGPATHNAME}" ] \
	|| f_vcshglobal_abort "required variable VCSHGLOBAL_INT_LASTPRGPATHNAME has not been set by the main program script"
[ -f "${VCSHGLOBAL_INT_LASTPRGPATHNAME}" -a -x "${VCSHGLOBAL_INT_LASTPRGPATHNAME}" ] \
	|| f_vcshglobal_abort "VCSHGLOBAL_INT_LASTPRGPATHNAME ('${VCSHGLOBAL_INT_LASTPRGPATHNAME}') does not seem to be a valid executable"

# set environment for child processes -- step 1 {{{
export VCSHGLOBAL_INT_LASTPRGPATHNAME
# }}}

# }}}

# debug support {{{
# DOC: set VCSHGLOBAL_DEBUG={ 0 | 1 }
unset g_vcshglobal_debug_flag
[ -n "${VCSH_DEBUG}" -o "${VCSHGLOBAL_DEBUG:-0}" -ne 0 ] \
	&& g_vcshglobal_debug_flag=x
# }}}

# command-line options processing {{{

# defaults {{{
g_vcshglobal_shinit_progopt_longopt_pref='vg'
unset g_vcshglobal_shinit_progopt_process_optstring
# }}}

# default option-processing implementations {{{

# args: SHORT_OPTION_CHARACTER OPTARG_EQUIVALENT
#
# default implementation: as the calling script should specify its own
# "optstring" value, we can mandate that it implements its own function, too.
# Therefore, this default implementation merely errors, as the code should
# never use this default function.
f_vcshglobal_shinit_progopt_custom_handle_shortoption()
{
	f_vcshglobal_error "f_vcshglobal_shinit_progopt_custom_handle_shortoption(): default implementation: calling script should implement its own function" \
		|| return $?
}

# args: ARG_FULL ARG_NAME ARG_VAL
#
#  ARG_FULL: includes the '--' prefix, the '=value' component(s), etc.;
#  ARG_NAME: just the name (trimmed at the first '='), without its '--' prefix;
#  ARG_VAL: if there was a '=', the stirng that came after that;
#
# default implementation:
#  * as there is not 'optstr'-like ('getopts(1)') string specified by the
#    calling script, we cannot assume that the calling script is interested in
#    processing "own" long options, so this default implementation is a
#    "no-op".
f_vcshglobal_shinit_progopt_custom_handle_longoption()
{
	f_vcshglobal_debug "f_vcshglobal_shinit_progopt_custom_handle_longoption(): no-op default implementation." \
			"args='$*';" \
			"arg_full='${1}';" \
			"arg_name='${2}';" \
			"arg_val='${3}';" \
			# end
}

# }}}

# process up to the next '--' or unrecognised option
#
# args: [PROGRAM_ARGS...]
#
# NOTE: external dependencies:
#  * g_vcshglobal_shinit_progopt_process_optstring: 'optstring' arg to getopts(1)
#  * f_vcshglobal_shinit_progopt_custom_handle_longoption( arg_full, arg_name_without_--, arg_val_if_one_was_specified )
#    * should set: g_vcshglobal_shinit_progopt_process_opt_proc_nargs (typically 1 or 2)
#  * f_vcshglobal_shinit_progopt_custom_handle_shortoption( short_option_characer, optarg )
#    * no need to fiddle with OPTIND or change the global 'OPTARG' variable.
#      * (the 'optstring' passed into f_vcshglobal_shinit_progopt_process() would already take care of that)
#
# NOTE: side effects
#  * updates OPTIND, just like getopts(1) does;
f_vcshglobal_shinit_progopt_process()
{
	l_vcshglobal_shinit_progopt_process_rc=0
	l_vcshglobal_shinit_progopt_process_optind="${OPTIND:-1}"
	l_vcshglobal_shinit_progopt_process_optstr="${g_vcshglobal_shinit_progopt_process_optstring}"

	# conditionally shift args, as per l_vcshglobal_shinit_progopt_process_optind (OPTIND) on entry
	if [ ${l_vcshglobal_shinit_progopt_process_rc} -eq 0 ] ; then
		l_vcshglobal_shinit_progopt_process_nshift=$((${l_vcshglobal_shinit_progopt_process_optind} - 1))
		if [ ${l_vcshglobal_shinit_progopt_process_nshift} -gt 0 ] ; then
			shift ${l_vcshglobal_shinit_progopt_process_nshift} \
				|| l_vcshglobal_shinit_progopt_process_rc=$?
		fi
	fi

	# manage 'l_vcshglobal_shinit_progopt_process_optstr' value.
	if [ ${l_vcshglobal_shinit_progopt_process_rc} -eq 0 -a -n "${l_vcshglobal_shinit_progopt_process_optstr}" ] ; then
		# MAYBE: add own options to l_vcshglobal_shinit_progopt_process_optstr, if any.
		# NOTE: add a single ':' prefix for 'getopts(1)' to *not* write its own
		# messages to stderr and give the (posix-standard) behaviour relied
		# upon by the code using 'getopts(1)' (below).
		l_vcshglobal_shinit_progopt_process_optstr="${l_vcshglobal_shinit_progopt_process_optstr#:}" \
			&& l_vcshglobal_shinit_progopt_process_optstr="${l_vcshglobal_shinit_progopt_process_optstr:+:${l_vcshglobal_shinit_progopt_process_optstr}}" \
			|| l_vcshglobal_shinit_progopt_process_rc=$?
	fi

	while [ ${l_vcshglobal_shinit_progopt_process_rc} -eq 0 -a $# -gt 0 ]
	do
		l_vcshglobal_shinit_progopt_process_nshift=0

		if [ ${l_vcshglobal_shinit_progopt_process_nshift} -eq 0 ] ; then
			l_vcshglobal_shinit_progopt_process_argfull="$1"
			# MAYBE: process long option components into separate variables
		fi

		# decide whether to stop processing args at this point
		if [ ${l_vcshglobal_shinit_progopt_process_nshift} -eq 0 ] ; then
			case "${l_vcshglobal_shinit_progopt_process_argfull}" in
				-- ) l_vcshglobal_shinit_progopt_process_nshift=1 ;;
				-* ) : ;;
				* ) break ;;
			esac
		fi

		# set l_vcshglobal_shinit_progopt_process_arglongname,
		# l_vcshglobal_shinit_progopt_process_arglongval.
		if [ ${l_vcshglobal_shinit_progopt_process_nshift} -eq 0 ] ; then
			case "${l_vcshglobal_shinit_progopt_process_argfull}" in
				--* )
					l_vcshglobal_shinit_progopt_process_arglongname="${l_vcshglobal_shinit_progopt_process_argfull%%=*}"
					[ "${l_vcshglobal_shinit_progopt_process_arglongname}" != "${l_vcshglobal_shinit_progopt_process_argfull}" ] \
						&& l_vcshglobal_shinit_progopt_process_arglongval="${l_vcshglobal_shinit_progopt_process_argfull#*=}" \
						|| unset l_vcshglobal_shinit_progopt_process_arglongval
					# remove the leading '--', which (in this block) should always succeed
					l_vcshglobal_shinit_progopt_process_arglongname="${l_vcshglobal_shinit_progopt_process_arglongname#--}"
					# avoid having a value from a previous iteration.
					# this will be set below, if needed.
					unset l_vcshglobal_shinit_progopt_process_arglongownname
					;;

				* )
					unset \
						l_vcshglobal_shinit_progopt_process_arglongname \
						l_vcshglobal_shinit_progopt_process_arglongval \
						# end
					;;
			esac
		fi

		if [ ${l_vcshglobal_shinit_progopt_process_nshift} -eq 0 -a -n "${l_vcshglobal_shinit_progopt_process_arglongname}" ] ; then
			case "${l_vcshglobal_shinit_progopt_process_arglongname}" in
				${g_vcshglobal_shinit_progopt_longopt_pref}-* )
					l_vcshglobal_shinit_progopt_process_arglongownname="${l_vcshglobal_shinit_progopt_process_arglongname#*-}" \
						&& [ "${l_vcshglobal_shinit_progopt_process_arglongownname}" != "${l_vcshglobal_shinit_progopt_process_arglongname}" ] \
						|| f_vcshglobal_abort "internal error: trimming option prefix did not yield the expected result. full option string: '${l_vcshglobal_shinit_progopt_process_argfull}'"

					l_vcshglobal_shinit_progopt_process_nshift=1
					case "${l_vcshglobal_shinit_progopt_process_arglongownname}" in
						help )
							f_vcshglobal_echo_to_stdout "TODO: help message" ;; # FIXME: implement

						debug )
							f_vcshglobal_debug "about to process '${l_vcshglobal_shinit_progopt_process_argfull}'. current_debug_flag='${g_vcshglobal_debug_flag}';"
							[ "${l_vcshglobal_shinit_progopt_process_arglongval:-1}" -ne 0 ] \
								&& g_vcshglobal_debug_flag=x || unset g_vcshglobal_debug_flag
							f_vcshglobal_debug "processed '${l_vcshglobal_shinit_progopt_process_argfull}'. new_debug_flag='${g_vcshglobal_debug_flag}';"
							;;

						* )
							l_vcshglobal_shinit_progopt_process_nshift=0
							;;
					esac
					;;
			esac
		fi

		if [ ${l_vcshglobal_shinit_progopt_process_nshift} -eq 0 -a -n "${l_vcshglobal_shinit_progopt_process_arglongname}" ] ; then
			g_vcshglobal_shinit_progopt_process_opt_proc_nargs=0

			f_vcshglobal_shinit_progopt_custom_handle_longoption \
					"${l_vcshglobal_shinit_progopt_process_argfull}" \
					"${l_vcshglobal_shinit_progopt_process_arglongname}" \
					"${l_vcshglobal_shinit_progopt_process_arglongval}" \
				|| l_vcshglobal_shinit_progopt_process_rc=$?

			# conditionally propagate 'g_vcshglobal_shinit_progopt_process_opt_proc_nargs' to 'l_vcshglobal_shinit_progopt_process_nshift'.
			[ ${l_vcshglobal_shinit_progopt_process_rc} -eq 0 \
					-a ${g_vcshglobal_shinit_progopt_process_opt_proc_nargs} -gt 0 ] \
				&& l_vcshglobal_shinit_progopt_process_nshift="${g_vcshglobal_shinit_progopt_process_opt_proc_nargs}"
		fi

		# deal with an unrecognised (unhandled) long option...
		if [ ${l_vcshglobal_shinit_progopt_process_rc} -eq 0 \
				-a ${l_vcshglobal_shinit_progopt_process_nshift} -eq 0 \
				-a -n "${l_vcshglobal_shinit_progopt_process_arglongname}" ] ; then
			f_vcshglobal_error "unrecognised long option '${l_vcshglobal_shinit_progopt_process_arglongname}' (full arg: '${l_vcshglobal_shinit_progopt_process_argfull}')" \
				|| l_vcshglobal_shinit_progopt_process_rc=$?
		fi

		if [ ${l_vcshglobal_shinit_progopt_process_rc} -eq 0 -a ${l_vcshglobal_shinit_progopt_process_nshift} -eq 0 -a -n "${l_vcshglobal_shinit_progopt_process_optstr}" ] ; then
			# process this arg as if it was the first (as it is, because
			# we're shifting args to the front).
			OPTIND=1

			#? unset l_vcshglobal_shinit_progopt_process_argfull
			if getopts "${l_vcshglobal_shinit_progopt_process_optstr}" l_vcshglobal_shinit_progopt_process_argfull "$@" ; then
				#? prev: v1: # NOTE: use l_vcshglobal_shinit_progopt_process_nshift in
				#? prev: v1: # this inner scope to flag whether we've processed the option
				#? prev: v1: # or not.
				#? prev: v1: # NOTE: l_vcshglobal_shinit_progopt_process_nshift will be
				#? prev: v1: # assigned to before exiting the enclosing 'if'.
				#? prev: v1: l_vcshglobal_shinit_progopt_process_nshift=0

				case "${l_vcshglobal_shinit_progopt_process_argfull}" in
					# MAYBE: common options?

					: )
						f_vcshglobal_error "missing option value for '${OPTARG}'" \
							|| l_vcshglobal_shinit_progopt_process_rc=$?
						;;

					? )
						f_vcshglobal_error "unrecognised option '${OPTARG}'" \
							|| l_vcshglobal_shinit_progopt_process_rc=$?
						;;

					* )
						f_vcshglobal_shinit_progopt_custom_handle_shortoption "${l_vcshglobal_shinit_progopt_process_argfull}" "${OPTARG}" \
							|| f_vcshglobal_error "error processing option '${l_vcshglobal_shinit_progopt_process_argfull}' (option_value='${OPTARG}')" \
							|| l_vcshglobal_shinit_progopt_process_rc=$?
						;;
				esac
			fi

			l_vcshglobal_shinit_progopt_process_nshift=$(($OPTIND - 1))
		fi

		[ ${l_vcshglobal_shinit_progopt_process_rc} -eq 0 -a ${l_vcshglobal_shinit_progopt_process_nshift} -gt 0 ] \
			|| break

		# update variables, positional arguments.
		l_vcshglobal_shinit_progopt_process_optind=$((${l_vcshglobal_shinit_progopt_process_optind} + ${l_vcshglobal_shinit_progopt_process_nshift}))
		shift ${l_vcshglobal_shinit_progopt_process_nshift} \
			|| f_vcshglobal_abort "internal error: cannot shift ${l_vcshglobal_shinit_progopt_process_nshift} args from a list of $# args ('$*')"
	done

	# commit to external variables
	OPTIND="${l_vcshglobal_shinit_progopt_process_optind}"

	# 'unset' "local" variables
	unset \
		l_vcshglobal_shinit_progopt_process_optstr \
		l_vcshglobal_shinit_progopt_process_argfull \
		l_vcshglobal_shinit_progopt_process_arglongname \
		l_vcshglobal_shinit_progopt_process_arglongownname \
		l_vcshglobal_shinit_progopt_process_arglongval \
		l_vcshglobal_shinit_progopt_process_optind \
		l_vcshglobal_shinit_progopt_process_nshift \
		# end

	return ${l_vcshglobal_shinit_progopt_process_rc}
}
# }}}

# config file utility functions {{{

# args: BASENAME
# side effects:
#  * on a file successfully found:
#   * sets g_vcshglobal_findcfgfile_lastcfgfile to an existing file;
#   * returns 0;
#  * on no cfg file being found:
#   * unsets g_vcshglobal_findcfgfile_lastcfgfile;
#   * returns 0;
#  * on error:
#   * returns a non-zero value;
f_vcshglobal_findcfgfile()
{
	l_vcshglobal_findcfgfile_basename="$1"
	unset g_vcshglobal_findcfgfile_lastcfgfile

	[ -n "${l_vcshglobal_findcfgfile_basename}" ] \
		|| return 1

	# optionally set VCSHGLOBAL_VCSH_CONFIG_FILE
	for l_vcshglobal_findcfgfile_pathname in \
		"/etc/${l_vcshglobal_findcfgfile_basename}" \
		"/usr/local/etc/${l_vcshglobal_findcfgfile_basename}" \
		${VCSHGLOBAL_VG_CFG_D:+"${VCSHGLOBAL_VG_CFG_D}/etc/${l_vcshglobal_findcfgfile_basename}"} \
		${VCSHGLOBAL_VG_FSSRC_D:+"${VCSHGLOBAL_VG_FSSRC_D}/etc/${l_vcshglobal_findcfgfile_basename}"} \
		${VCSHGLOBAL_VG_FSSRC_D:+"${VCSHGLOBAL_VG_FSSRC_D}/usr/local/etc/${l_vcshglobal_findcfgfile_basename}"} \
		${VCSHGLOBAL_VG_BASE_D:+"${VCSHGLOBAL_VG_BASE_D}/local/etc/${l_vcshglobal_findcfgfile_basename}"} \
		# end
	do
		[ -n "${l_vcshglobal_findcfgfile_pathname}" -a -f "${l_vcshglobal_findcfgfile_pathname}" -a -r "${l_vcshglobal_findcfgfile_pathname}" ] \
			|| continue

		g_vcshglobal_findcfgfile_lastcfgfile="${l_vcshglobal_findcfgfile_pathname}" \
			&& break
	done

	# debug message with found filename
	[ -n "${g_vcshglobal_findcfgfile_lastcfgfile}" ] \
		&& f_vcshglobal_debug "found config file for basename='${l_vcshglobal_findcfgfile_basename}': '${g_vcshglobal_findcfgfile_lastcfgfile}'"

	unset \
		l_vcshglobal_findcfgfile_basename \
		l_vcshglobal_findcfgfile_pathname \
		# end
	return 0
}

# args: VARNAME [basename [suffix_id]]
f_vcshglobal_shinit_int_calc_cfgfile_invar()
{
	# pre-conditions
	l_vcshglobal_shinit_int_calc_cfgfile_invar_varname="$1" \
		&& shift \
		&& [ -n "${l_vcshglobal_shinit_int_calc_cfgfile_invar_varname}" ] \
		|| f_vcshglobal_error "f_vcshglobal_shinit_int_calc_cfgfile_invar(): arg_1 invalid. needs a non-empty variable name" \
		|| return $?

	# optional args
	#  MAYBE: put the default basename in a global variable somewhere
	[ $# -gt 0 ] \
		&& l_vcshglobal_shinit_int_calc_cfgfile_invar_fnamebase="$1" \
		&& shift \
		|| unset l_vcshglobal_shinit_int_calc_cfgfile_invar_fnamebase
		# end
	[ $# -gt 0 ] \
		&& l_vcshglobal_shinit_int_calc_cfgfile_invar_fnamesuff="$1" \
		&& shift \
		|| unset l_vcshglobal_shinit_int_calc_cfgfile_invar_fnamesuff
		# end

	# defaults
	: "${l_vcshglobal_shinit_int_calc_cfgfile_invar_fnamebase:=vcshglobal}"

	l_vcshglobal_shinit_int_calc_cfgfile_invar_rc=0

	if [ ${l_vcshglobal_shinit_int_calc_cfgfile_invar_rc} -eq 0 ] ; then
		eval "l_vcshglobal_shinit_int_calc_cfgfile_invar_varval=\${${l_vcshglobal_shinit_int_calc_cfgfile_invar_varname}}" \
			|| l_vcshglobal_shinit_int_calc_cfgfile_invar_rc=$?
	fi

	# check whether the variable has a non-empty value already, and return straight away if it has.
	[ ${l_vcshglobal_shinit_int_calc_cfgfile_invar_rc} -eq 0 \
			-a -n "${l_vcshglobal_shinit_int_calc_cfgfile_invar_varval}" ] \
		&& return 0

	if [ ${l_vcshglobal_shinit_int_calc_cfgfile_invar_rc} -eq 0 \
			-a -n "${l_vcshglobal_shinit_int_calc_cfgfile_invar_fnamesuff}" ] ; then
		# * just in case, get rid of a single '-' string prefix;
		# * adjust the filename suffix string to have a standard prefix ('-');
		l_vcshglobal_shinit_int_calc_cfgfile_invar_fnamesuff="${l_vcshglobal_shinit_int_calc_cfgfile_invar_fnamesuff#-}" \
			&& l_vcshglobal_shinit_int_calc_cfgfile_invar_fnamesuff="${l_vcshglobal_shinit_int_calc_cfgfile_invar_fnamesuff:+-${l_vcshglobal_shinit_int_calc_cfgfile_invar_fnamesuff}}" \
			|| l_vcshglobal_shinit_int_calc_cfgfile_invar_rc=$?
	fi

	if [ ${l_vcshglobal_shinit_int_calc_cfgfile_invar_rc} -eq 0 ] ; then
		# NOTE: '${g_vcshglobal_findcfgfile_lastcfgfile}' can have an empty
		# value, and that's ok for this function: we just propagate it to the
		# caller-specified variable below.
		f_vcshglobal_findcfgfile "${l_vcshglobal_shinit_int_calc_cfgfile_invar_fnamebase}${l_vcshglobal_shinit_int_calc_cfgfile_invar_fnamesuff}" \
			&& l_vcshglobal_shinit_int_calc_cfgfile_invar_varval="${g_vcshglobal_findcfgfile_lastcfgfile}" \
			|| l_vcshglobal_shinit_int_calc_cfgfile_invar_rc=$?
	fi

	# conditionally comit results to caller-specified environment variable.
	if [ ${l_vcshglobal_shinit_int_calc_cfgfile_invar_rc} -eq 0 ] ; then
		eval "${l_vcshglobal_shinit_int_calc_cfgfile_invar_varname}='${l_vcshglobal_shinit_int_calc_cfgfile_invar_varval}'" \
			&& export "${l_vcshglobal_shinit_int_calc_cfgfile_invar_varname}" \
			|| l_vcshglobal_shinit_int_calc_cfgfile_invar_rc=$?
	fi
	unset \
		l_vcshglobal_shinit_int_calc_cfgfile_invar_varval \
		l_vcshglobal_shinit_int_calc_cfgfile_invar_varname \
		l_vcshglobal_shinit_int_calc_cfgfile_invar_fnamesuff \
		l_vcshglobal_shinit_int_calc_cfgfile_invar_fnamebase \
		# end
	return ${l_vcshglobal_shinit_int_calc_cfgfile_invar_rc}
}

# ref: f_vcshglobal_shinit_int_proc_cfgfile "${VCSHGLOBAL_VG_CONFIG_FILE_PRE}"
# args: CONFIG_FILENAME
f_vcshglobal_shinit_int_proc_cfgfile()
{
	l_vcshglobal_shinit_int_proc_cfgfile_cfgfile="$1" \
		&& shift \
		|| f_vcshglobal_abort "invalid syntax: needs a positional arg (can be empty): CONFIG_FILENAME"

	l_vcshglobal_shinit_int_proc_cfgfile_rc=0

	if [ ${l_vcshglobal_shinit_int_proc_cfgfile_rc} -eq 0 ] ; then
		case "${l_vcshglobal_shinit_int_proc_cfgfile_cfgfile}" in
			# TODO: put this logic in a new function: f_vcshglobal_cfgfile_isfilename()
			# MAYBE: add a stage to f_vcshglobal_main_proc_cfgfiles() to call a new function that would either 'unset(1)' or assign a null value to variables that fail the check 'f_vcshglobal_cfgfile_isfilename()'
			# TODO: determine which values to support, out of all of these
			0 | - | false | f )
				unset l_vcshglobal_shinit_int_proc_cfgfile_cfgfile
				;;
		esac
	fi

	if [ ${l_vcshglobal_shinit_int_proc_cfgfile_rc} -eq 0 -a -n "${l_vcshglobal_shinit_int_proc_cfgfile_cfgfile}" ] ; then
		[ -f "${l_vcshglobal_shinit_int_proc_cfgfile_cfgfile}" -a -r "${l_vcshglobal_shinit_int_proc_cfgfile_cfgfile}" ] \
			|| f_vcshglobal_error "'${l_vcshglobal_shinit_int_proc_cfgfile_cfgfile}' is not a readable file" \
			|| l_vcshglobal_shinit_int_proc_cfgfile_rc=$?
	fi
	if [ ${l_vcshglobal_shinit_int_proc_cfgfile_rc} -eq 0 -a -n "${l_vcshglobal_shinit_int_proc_cfgfile_cfgfile}" ] ; then
		f_vcshglobal_debug "about to source file: '${l_vcshglobal_shinit_int_proc_cfgfile_cfgfile}'"
		. "${l_vcshglobal_shinit_int_proc_cfgfile_cfgfile}" \
			|| {
				l_vcshglobal_shinit_int_proc_cfgfile_rc=$? \
					|| f_vcshglobal_error "error 'sourcing' file '${l_vcshglobal_shinit_int_proc_cfgfile_cfgfile}': ${l_vcshglobal_shinit_int_proc_cfgfile_rc}" \
					|| :
					# end
			}
	fi

	unset \
		l_vcshglobal_shinit_int_proc_cfgfile_cfgfile \
		# end
	return ${l_vcshglobal_shinit_int_proc_cfgfile_rc}
}

# }}}

# get value for VCSHGLOBAL_VG_BASE_D {{{
f_vcshglobal_shinit_int_get_vg_vars_01()
{
	if [ -z "${VCSHGLOBAL_VG_BASE_D}" ] ; then
		unset l_vcshglobal_shinit_int_get_vg_vars_01_dirnow

		for l_vcshglobal_shinit_int_get_vg_vars_01_stageid in \
			stageid_vcshglobalbasedir_prgasis \
			stageid_vcshglobalbasedir_prglinkdst \
			stageid_vcshglobalbasedir_hc_01 \
			# end
		do
			unset l_vcshglobal_shinit_int_get_vg_vars_01_dirnow
			case "${l_vcshglobal_shinit_int_get_vg_vars_01_stageid}" in
				stageid_vcshglobalbasedir_prgasis | stageid_vcshglobalbasedir_prglinkdst )
					[ -n "${VCSHGLOBAL_INT_LASTPRGPATHNAME}" ] \
						|| continue

					case "${l_vcshglobal_shinit_int_get_vg_vars_01_stageid}" in
						stageid_vcshglobalbasedir_prgasis )
							l_vcshglobal_shinit_int_get_vg_vars_01_prgnow="${VCSHGLOBAL_INT_LASTPRGPATHNAME}"
							;;

						stageid_vcshglobalbasedir_prglinkdst )
							unset l_vcshglobal_shinit_int_get_vg_vars_01_prgnow
							l_vcshglobal_shinit_int_get_vg_vars_01_prgnow=`readlink -f "${VCSHGLOBAL_INT_LASTPRGPATHNAME}" 2> /dev/null` \
								&& [ -n "${l_vcshglobal_shinit_int_get_vg_vars_01_prgnow}" ] \
								|| continue \
								# end
							;;

						* )
							f_vcshglobal_abort "internal error: invalid/unsupported stage id: '${l_vcshglobal_shinit_int_get_vg_vars_01_stageid}'" ;;

					esac
					# TODO: have stages for this, too (or fold them into the stageid somehow)
					[ -n "${l_vcshglobal_shinit_int_get_vg_vars_01_prgnow}" ] \
						&& l_vcshglobal_shinit_int_get_vg_vars_01_dirnow="${l_vcshglobal_shinit_int_get_vg_vars_01_prgnow%/opt/vcshglobal/*}" \
						&& [ "${l_vcshglobal_shinit_int_get_vg_vars_01_dirnow}" != "${l_vcshglobal_shinit_int_get_vg_vars_01_prgnow}" ] \
						&& l_vcshglobal_shinit_int_get_vg_vars_01_dirnow="${l_vcshglobal_shinit_int_get_vg_vars_01_dirnow}/opt/vcshglobal" \
						|| continue \
						# end
					;;

				stageid_vcshglobalbasedir_hc_01 )
					l_vcshglobal_shinit_int_get_vg_vars_01_dirnow='/usr/local/opt/vcshglobal' ;;

				* )
					f_vcshglobal_abort "internal error: invalid/unsupported stage id: '${l_vcshglobal_shinit_int_get_vg_vars_01_stageid}'" ;;

			esac

			[ -n "${l_vcshglobal_shinit_int_get_vg_vars_01_dirnow}" -a -d "${l_vcshglobal_shinit_int_get_vg_vars_01_dirnow}/" ] \
				&& [ -d "${l_vcshglobal_shinit_int_get_vg_vars_01_dirnow}/rootdir/" ] \
				|| continue \
				# end

			VCSHGLOBAL_VG_BASE_D="${l_vcshglobal_shinit_int_get_vg_vars_01_dirnow}"
			f_vcshglobal_debug "found value for VCSHGLOBAL_VG_BASE_D='${VCSHGLOBAL_VG_BASE_D}' in stageid '${l_vcshglobal_shinit_int_get_vg_vars_01_stageid}'"
			break
		done
		# NOTE: this works even if the variable has not been assigned to yet
		export VCSHGLOBAL_VG_BASE_D
	fi

	return 0
}
# }}}

f_vcshglobal_shinit_int_get_vg_vars_derived()
{
	[ -n "${VCSHGLOBAL_VG_BASE_D}" ] \
		|| f_vcshglobal_error "f_vcshglobal_shinit_int_get_vg_vars_derived(): variable VCSHGLOBAL_VG_BASE_D should be non-empty at this point" \
		|| return $?
	export VCSHGLOBAL_VG_BASE_D

	# set up some more defaults {{{
	: "${VCSHGLOBAL_VG_FSSRC_D:=${VCSHGLOBAL_VG_BASE_D}/rootdir}"
	export VCSHGLOBAL_VG_FSSRC_D

	: "${VCSHGLOBAL_VG_CFG_D:=${VCSHGLOBAL_VG_BASE_D}/config}"
	export VCSHGLOBAL_VG_CFG_D
	# }}}

	return 0
}

f_vcshglobal_shinit_int_calc_progs_derived()
{
	# VCSHGLOBAL_MR_TOP_D {{{
	# MAYBE: try to use one of several possibilities, based on the variables we've got so far.
	if [ -z "${VCSHGLOBAL_MR_TOP_D}" -a -n "${VCSHGLOBAL_VG_BASE_D}" ] ; then
		VCSHGLOBAL_MR_TOP_D="${VCSHGLOBAL_VG_BASE_D}"
	fi

	[ -n "${VCSHGLOBAL_MR_TOP_D}" ] \
		&& export VCSHGLOBAL_MR_TOP_D \
		# end
	# }}}

	return 0
}

# config file processing {{{
f_vcshglobal_main_proc_cfgfiles()
{
	l_vcshglobal_main_proc_cfgfiles_main_msgpref="[main] [common] "
	l_vcshglobal_main_proc_cfgfiles_main_rc=0

	if [ ${l_vcshglobal_main_proc_cfgfiles_main_rc} -eq 0 ] ; then
		for l_vcshglobal_main_proc_cfgfiles_main_stage in \
			stageid_vcshglobal_main_calc_cfgfile_pre \
			stageid_vcshglobal_main_proc_cfgfile_pre \
			\
			stageid_vcshglobal_main_calc_vgvars_01 \
			\
			stageid_vcshglobal_main_calc_cfgfile_main \
			stageid_vcshglobal_main_proc_cfgfile_main \
			\
			stageid_vcshglobal_main_calc_vgvars_derived \
			\
			stageid_vcshglobal_main_calc_programs_cfgfiles \
			stageid_vcshglobal_main_calc_programs_derived \
			\
			stageid_vcshglobal_main_calc_cfgfile_post \
			stageid_vcshglobal_main_proc_cfgfile_post \
			\
			# end
		do
			f_vcshglobal_debug "${l_vcshglobal_main_proc_cfgfiles_main_msgpref}processing stage '${l_vcshglobal_main_proc_cfgfiles_main_stage}':"

			case "${l_vcshglobal_main_proc_cfgfiles_main_stage}" in
				stageid_vcshglobal_main_calc_vgvars_01 )
					f_vcshglobal_shinit_int_get_vg_vars_01 \
						|| l_vcshglobal_main_proc_cfgfiles_main_rc=$?
					;;

				stageid_vcshglobal_main_calc_vgvars_derived )
					f_vcshglobal_shinit_int_get_vg_vars_derived \
						|| l_vcshglobal_main_proc_cfgfiles_main_rc=$?
					;;

				stageid_vcshglobal_main_calc_cfgfile_pre )
					f_vcshglobal_shinit_int_calc_cfgfile_invar VCSHGLOBAL_VG_CONFIG_FILE_PRE '' "pre" \
						|| l_vcshglobal_main_proc_cfgfiles_main_rc=$?
					;;

				stageid_vcshglobal_main_proc_cfgfile_pre )
					f_vcshglobal_shinit_int_proc_cfgfile "${VCSHGLOBAL_VG_CONFIG_FILE_PRE}" \
						|| l_vcshglobal_main_proc_cfgfiles_main_rc=$?
					;;

				stageid_vcshglobal_main_calc_cfgfile_main )
					f_vcshglobal_shinit_int_calc_cfgfile_invar VCSHGLOBAL_VG_CONFIG_FILE_MAIN '' "" \
						|| l_vcshglobal_main_proc_cfgfiles_main_rc=$?
					;;

				stageid_vcshglobal_main_proc_cfgfile_main )
					f_vcshglobal_shinit_int_proc_cfgfile "${VCSHGLOBAL_VG_CONFIG_FILE_MAIN}" \
						|| l_vcshglobal_main_proc_cfgfiles_main_rc=$?
					;;

				stageid_vcshglobal_main_calc_cfgfile_post )
					f_vcshglobal_shinit_int_calc_cfgfile_invar VCSHGLOBAL_VG_CONFIG_FILE_POST '' "post" \
						|| l_vcshglobal_main_proc_cfgfiles_main_rc=$?
					;;

				stageid_vcshglobal_main_proc_cfgfile_post )
					f_vcshglobal_shinit_int_proc_cfgfile "${VCSHGLOBAL_VG_CONFIG_FILE_POST}" \
						|| l_vcshglobal_main_proc_cfgfiles_main_rc=$?
					;;

				stageid_vcshglobal_main_calc_programs_cfgfiles )
					f_vcshglobal_shinit_int_calc_cfgfile_invar VCSHGLOBAL_VCSH_CONFIG_FILE 'vcshglobal_vcshconfig' \
						&& f_vcshglobal_shinit_int_calc_cfgfile_invar VCSHGLOBAL_MR_CONFIG_FILE 'vcshglobal_mrconfig' \
						|| l_vcshglobal_main_proc_cfgfiles_main_rc=$?
					;;

				stageid_vcshglobal_main_calc_programs_derived )
					f_vcshglobal_shinit_int_calc_progs_derived \
						|| l_vcshglobal_main_proc_cfgfiles_main_rc=$?
					;;

				* )
					f_vcshglobal_abort "${l_vcshglobal_main_proc_cfgfiles_main_msgpref}invalid stage id '${l_vcshglobal_main_proc_cfgfiles_main_stage}'"
					;;
			esac

			# prev: v1: [ ${l_vcshglobal_main_proc_cfgfiles_main_rc} -eq 0 ] \
			# prev: v1: 	|| f_vcshglobal_abort "${l_vcshglobal_main_proc_cfgfiles_main_msgpref}failed in stage '${l_vcshglobal_main_proc_cfgfiles_main_stage}'. error_code=${l_vcshglobal_main_proc_cfgfiles_main_rc}."
			[ ${l_vcshglobal_main_proc_cfgfiles_main_rc} -eq 0 ] \
				|| break
		done
	fi

	# report exported variables so far
	if [ -n "${g_vcshglobal_debug_flag}" ] ; then
		{
			# variables here are inside a child process, so no need to cleanup
			t_f_filter()
			{
				grep -e '^VCSHGLOBAL_' | grep -v '^VCSHGLOBAL[^=]*_INT_' | sort || true
			}

			printf '\n%s\n' "current environment variables:"
			set | t_f_filter

			printf '\n%s\n' "exported environment variables:"
			env | t_f_filter

			# MAYBE: difference between the two? (but it might require tmp
			# files, as the elegant solution would require <( ... ), which is
			# not posix)

			printf '\n'
		} 2>&1 | f_vcshglobal_debug_from_stdin \
			|| :
	fi

	unset \
		l_vcshglobal_main_proc_cfgfiles_main_msgpref \
		l_vcshglobal_main_proc_cfgfiles_main_stage \
		# end
	return ${l_vcshglobal_main_proc_cfgfiles_main_rc}
}
# }}}

# FIXME: call this explicitly from somewhere else
# TEST: for now, no options specified in g_vcshglobal_shinit_progopt_process_optstring
OPTIND=1 && \
f_vcshglobal_shinit_progopt_process "$@" \
	&& shift $(($OPTIND - 1)) \
	|| f_vcshglobal_abort "processing program options. remaining parameters: '$*'"
f_vcshglobal_debug "remaining program args: '$*'"

# FIXME: call this explicitly from somewhere else (a new function to be called from each top-level script?)
f_vcshglobal_main_proc_cfgfiles \
	|| f_vcshglobal_abort "failed processing main common code"

# defaults {{{
# }}}

# vim600: set filetype=sh fileformat=unix:
# vim: set noexpandtab:
# vi: set autoindent tabstop=4 shiftwidth=4:
