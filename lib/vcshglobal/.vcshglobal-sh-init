# shell script

# basic functions {{{
f_vcshglobal_echo_to_stdout()
{
	echo "${VCSHGLOBAL_INT_LASTPRGPATHNAME:-$0}:" "$@" 1>&2
}

f_vcshglobal_error()
{
	f_vcshglobal_echo_to_stdout "ERROR:" "$@"
	return 1
}

f_vcshglobal_abort()
{
	f_vcshglobal_error "$@" "-- aborting" \
		|| exit $?
}
# }}}

# initial validation {{{
[ -n "${VCSHGLOBAL_INT_LASTPRGPATHNAME}" ] \
	|| f_vcshglobal_abort "required variable VCSHGLOBAL_INT_LASTPRGPATHNAME has not been set by the main program script"
[ -f "${VCSHGLOBAL_INT_LASTPRGPATHNAME}" -a -x "${VCSHGLOBAL_INT_LASTPRGPATHNAME}" ] \
	|| f_vcshglobal_abort "VCSHGLOBAL_INT_LASTPRGPATHNAME ('${VCSHGLOBAL_INT_LASTPRGPATHNAME}') does not seem to be a valid executable"
# }}}

# set environment for child processes -- step 1 {{{
export VCSHGLOBAL_INT_LASTPRGPATHNAME
# }}}

# get value for VCSHGLOBAL_VG_BASE_D {{{
if [ -z "${VCSHGLOBAL_VG_BASE_D}" ] ; then
	unset t_dirnow

	for t_stageid in \
		stageid_vcshglobalbasedir_prgasis \
		stageid_vcshglobalbasedir_prglinkdst \
		stageid_vcshglobalbasedir_hc_01 \
		# end
	do
		unset t_dirnow
		case "${t_stageid}" in
			stageid_vcshglobalbasedir_prgasis | stageid_vcshglobalbasedir_prglinkdst )
				[ -n "${VCSHGLOBAL_INT_LASTPRGPATHNAME}" ] \
					|| continue

				case "${t_stageid}" in
					stageid_vcshglobalbasedir_prgasis )
						t_prgnow="${VCSHGLOBAL_INT_LASTPRGPATHNAME}"
						;;

					stageid_vcshglobalbasedir_prglinkdst )
						unset t_prgnow
						t_prgnow=`readlink -f "${VCSHGLOBAL_INT_LASTPRGPATHNAME}" 2> /dev/null` \
							&& [ -n "${t_prgnow}" ] \
							|| continue \
							# end
						;;

					* )
						f_vcshglobal_abort "internal error: invalid/unsupported stage id: '${t_stageid}'" ;;

				esac
				[ -n "${t_prgnow}" ] \
					&& t_dirnow="${t_prgnow%/opt/vcshglobal/*}" \
					&& [ "${t_dirnow}" != "${t_prgnow}" ] \
					&& t_dirnow="${t_dirnow}/opt/vcshglobal" \
					|| continue \
					# end
				;;

			stageid_vcshglobalbasedir_hc_01 )
				t_dirnow='/usr/local/opt/vcshglobal' ;;

			* )
				f_vcshglobal_abort "internal error: invalid/unsupported stage id: '${t_stageid}'" ;;

		esac

		[ -n "${t_dirnow}" -a -d "${t_dirnow}/" ] \
			&& [ -d "${t_dirnow}/rootdir/" ] \
			|| continue \
			# end

		VCSHGLOBAL_VG_BASE_D="${t_dirnow}"
		[ -n "${VCSH_DEBUG}" ] \
			&& echo "[DEBUG] found value for VCSHGLOBAL_VG_BASE_D='${VCSHGLOBAL_VG_BASE_D}' in stageid '${t_stageid}'" 1>&2 \
			|| true
		break
	done
	[ -n "${VCSHGLOBAL_VG_BASE_D}" ] \
		|| {
			echo "${VCSHGLOBAL_INT_LASTPRGPATHNAME}: ERROR: could not work out a valid value for VCSHGLOBAL_VG_BASE_D" 1>&2
			exit 1
		}
	export VCSHGLOBAL_VG_BASE_D
fi
# }}}

# set up some more defaults {{{
: "${VCSHGLOBAL_VG_FSSRC_D:=${VCSHGLOBAL_VG_BASE_D}/rootdir}"
export VCSHGLOBAL_VG_FSSRC_D

: "${VCSHGLOBAL_VG_CFG_D:=${VCSHGLOBAL_VG_BASE_D}/config}"
export VCSHGLOBAL_VG_CFG_D
# }}}

# MAYBE: move the code below to a file sourced from/a function inside the 'functions' script

# load the first config file from a list of alternatives {{{
# MAYBE: change code to use a list of tuples (say: "id:dir:filename" to allow for the 'is dir?' intermediate check)
if [ -z "${VCSHGLOBAL_VG_CONFIG_FILE}" ] ; then
	for t_stageid in \
		stageid_cfgfile_hc_usr_local_etc \
		stageid_cfgfile_hc_vcshglobal_rootdir_usr_local_etc \
		stageid_cfgfile_hc_vcshglobal_basedir_local_etc \
		# end
	do
		unset t_pathname
		case "${t_stageid}" in
			stageid_cfgfile_hc_usr_local_etc )
				t_pathname="/usr/local/etc/vcshglobal"
				;;

			stageid_cfgfile_hc_vcshglobal_rootdir_usr_local_etc )
				t_pathname="${VCSHGLOBAL_VG_FSSRC_D}/usr/local/etc/vcshglobal"
				;;

			stageid_cfgfile_hc_vcshglobal_basedir_local_etc )
				t_pathname="${VCSHGLOBAL_VG_BASE_D}/local/etc/vcshglobal"
				;;

			* )
				f_vcshglobal_abort "internal error: invalid/unsupported stage id: '${t_stageid}'"
				;;

		esac
		[ -n "${t_pathname}" -a -f "${t_pathname}" -a -r "${t_pathname}" ] \
			&& VCSHGLOBAL_VG_CONFIG_FILE="${t_pathname}" \
			&& break \
			|| continue
	done
fi
[ -n "${VCSHGLOBAL_VG_CONFIG_FILE}" ] \
	&& export VCSHGLOBAL_VG_CONFIG_FILE

if [ -n "${VCSHGLOBAL_VG_CONFIG_FILE}" ] ; then
	. "${VCSHGLOBAL_VG_CONFIG_FILE}" \
		|| f_vcshglobal_abort "error sourcing config file '${VCSHGLOBAL_VG_CONFIG_FILE}'"
fi
# }}}

# defaults {{{
# }}}

# vim600: set filetype=sh fileformat=unix:
# vim: set noexpandtab:
# vi: set autoindent tabstop=4 shiftwidth=4:
